apiVersion: apps/v1
kind: Deployment
metadata:
  name: product-db
spec:
  replicas: 1
  selector: { matchLabels: { app: product-db } }
  template:
    metadata: { labels: { app: product-db } }
    spec:
      containers:
        - name: postgres
          image: postgres:15-alpine
          env:
            - { name: POSTGRES_DB, value: "products" }
            - { name: POSTGRES_USER, value: "postgres" }
            - { name: POSTGRES_PASSWORD, value: "postgres" }
          ports:
            - containerPort: 5432
          readinessProbe:
            exec: { command: ["pg_isready","-U","postgres","-d","products"] }
            initialDelaySeconds: 5
            periodSeconds: 5
          livenessProbe:
            exec: { command: ["pg_isready","-U","postgres","-d","products"] }
            initialDelaySeconds: 15
            periodSeconds: 10
          volumeMounts:
            - { name: data, mountPath: /var/lib/postgresql/data }
      volumes:
        - name: data
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: product-db
spec:
  selector: { app: product-db }
  ports: [{ port: 5432, targetPort: 5432 }]
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: order-db
spec:
  replicas: 1
  selector: { matchLabels: { app: order-db } }
  template:
    metadata: { labels: { app: order-db } }
    spec:
      containers:
        - name: postgres
          image: postgres:15-alpine
          env:
            - { name: POSTGRES_DB, value: "orders" }
            - { name: POSTGRES_USER, value: "postgres" }
            - { name: POSTGRES_PASSWORD, value: "postgres" }
          ports:
            - containerPort: 5432
          readinessProbe:
            exec: { command: ["pg_isready","-U","postgres","-d","orders"] }
            initialDelaySeconds: 5
            periodSeconds: 5
          livenessProbe:
            exec: { command: ["pg_isready","-U","postgres","-d","orders"] }
            initialDelaySeconds: 15
            periodSeconds: 10
          volumeMounts:
            - { name: data, mountPath: /var/lib/postgresql/data }
      volumes:
        - name: data
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: order-db
spec:
  selector: { app: order-db }
  ports: [{ port: 5432, targetPort: 5432 }]
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: customer-db
spec:
  replicas: 1
  selector: { matchLabels: { app: customer-db } }
  template:
    metadata: { labels: { app: customer-db } }
    spec:
      containers:
        - name: postgres
          image: postgres:15-alpine
          env:
            - { name: POSTGRES_DB, value: "customers" }
            - { name: POSTGRES_USER, value: "postgres" }
            - { name: POSTGRES_PASSWORD, value: "postgres" }
          ports:
            - containerPort: 5432
          readinessProbe:
            exec: { command: ["pg_isready","-U","postgres","-d","customers"] }
            initialDelaySeconds: 5
            periodSeconds: 5
          livenessProbe:
            exec: { command: ["pg_isready","-U","postgres","-d","customers"] }
            initialDelaySeconds: 15
            periodSeconds: 10
          volumeMounts:
            - { name: data, mountPath: /var/lib/postgresql/data }
      volumes:
        - name: data
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: customer-db
spec:
  selector: { app: customer-db }
  ports: [{ port: 5432, targetPort: 5432 }]

